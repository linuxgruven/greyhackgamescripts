


//update log:
//Stability improvements in some commands (hack, oof)
//Bug fixes in the 'oof' command
//added 'brute' - [port] [password list file] [user] bruteforces a users password (attacker shell)



//ideas:

//considering removing net-rob and other bank features due to how little money you can find in them
//'net-rob' was a command that hacked every machine on a network that it could and read out the contents of every users bank file

//thinking about exploit DB support
//This would be in its own seperate Fantom shell.
//Updating the DB with new service versions would be as easy as running a command in Fantom for a couple minutes depending on hardware
//This 'command' would scour the web for service versions it doesnt have in the db and note down the addresses an unsafe values into the DB

//Prompt user to update metaxploit.so for them on startup if its outdated




clear_screen

mx = include_lib("/lib/metaxploit.so")
crypto = include_lib("/lib/crypto.so")
apt = include_lib("/lib/aptclient.so")

if mx == null then
    mx = include_lib(current_path+"/metaxploit.so")
    if mx == null then
        mx = include_lib("/home/guest/metaxploit.so")
    end if
end if

if crypto == null then
    crypto = include_lib(current_path+"/crypto.so")
    if crypto == null then
        crypto = include_lib("/home/guest/crypto.so")
    end if
end if





FantomSystemShell = {}


FantomSystemShell.login = {}
FantomSystemShell.login.func = function(shell,args=null)
    if args == null then
        FantomNotify("Please specify a user an password.",true)
        return
    end if
    if args.len >=2 then
        sh = get_shell(args[0],args[1])
        if typeof(sh) == "shell" then
            sh.start_terminal
        else
            FantomNotify("Invalid login details.",true)
        end if
    else
        FantomNotify("Too little arguments.",true)
        return
    end if
end function


FantomSystemShell.commands = {}
FantomSystemShell.commands.func = function(shell,args=null)
    print("\n")
    print("<color=green>secure</color><color=#3f3e40>              - Secures your system</color>")
    print("<color=green>decipher</color><color=#3f3e40> [hash]     - Decipher a hash</color>")
    print("<color=green>selfesc</color><color=#3f3e40> [opt:extra] - local escalation</color>")
    print("<color=green>processlogger - Logs when processes are open/closed</color><color=#3f3e40> ")
    print("<color=green>usegift - Automatically connect to wifi in gift.txt</color><color=#3f3e40> ")
    print("<color=green>login - Login as another user (no sudo binary required)</color><color=#3f3e40> ")

    print("\n<color=green>Misc commands.</color>\n")

    print("<color=green>finder</color><color=#3f3e40> [service] - Find NPC running x service </color>")
    print("\n")

end function


FantomSystemShell.secure = {}
FantomSystemShell.secure.func = function(shell,args=null)

    if active_user != "root" then
        FantomNotify("Fantom cannot ensure this command worked successfully without root access",true)
    else
        FantomNotify("Fantom has secured this machine")
    end if

    root = get_shell.host_computer.File("/")
    for folder in root.get_folders
        folder.chmod("o-wrx",1)
        folder.chmod("u-wr",1)
        folder.chmod("g-wr",1)
    end for
    for file in root.get_files
        file.chmod("o-wrx")
        file.chmod("u-wr")
        file.chmod("g-wr")
    end for
end function


FantomSystemShell.exit = {}
FantomSystemShell.exit.func = function(shell,args=null)
    exit("<color=green>Thanks for using Fantom</color>")
end function









defaultPrefix = "\n<color=#3f3e40>Fantom <color=green>[SYSTEM]</color> > </color>"
defaultAttackerPrefix = "\n<color=#3f3e40>Fantom <color=green>[ATTACKER]</color> > </color>"

FantomNotify = function(message,warn=false)
    if warn then
        print("<color=#fc0345>*</color> <color=#3f3e40>"+message+"</color>")
    else
        print("<color=green>*</color> <color=#3f3e40>"+message+"</color>")
    end if
end function




ipgen = function()

    r = range(255,1)
    r.shuffle
    ip = ""

    for i in range(1,4)

        pull = r.pull
        ip = ip + pull+"."

        if i == 1 and pull == "192" then
            ipgen
        end if

    end for
    ip = ip[:-1]

    if not is_valid_ip(ip) then
        ipgen
    end if
    if not get_shell.ping(ip) then
        ipgen
    end if

    return ip
end function


findService = function(service)

    while true
        ip = ipgen
        r = get_router(ip)

        if typeof(r) == "router" then

                ports = r.used_ports

                for port in ports

                    if not r.port_info(port).indexOf(service) == null then
                        return ip
                    end if

                end for

        
        end if


    end while
end function



//this disables the metaxploit an crypto check before going into attacker mode
    debug = false




FantomLogo = function()

    print("<color=green>   ___</color>")
    print("<color=green>  /    \</color>")
    print("<color=green> / <b>o o</b>  \</color>")
    print("<color=green> |       |</color>")
    print("<color=green> /       \</color>")
    print("<color=green>/         \</color>")
    print("<color=green>|/\/\/\/\/|</color>\n")
    //ASCII art is hard haha
    //I tried


    print("<color=green><b>Fantom</b></color> <color=#3f3e40>Rewritten</color>")
    FantomNotify("Enter a valid ip/domain for an attacker shell or use system commands by typing 'commands'")
    FantomNotify("If you want further help trying saying 'help'")
    FantomNotify("You may also type 'exit' to close out of Fantom.")
    print(" ")
    if hackingEnabled or debug then
        FantomNotify("Hacking commands enabled.")
        if debug then
            FantomNotify("(Debug mode)",true)
        end if
    else
        FantomNotify("Hacking commands are disabled.\n",true)
    end if

end function




hackingEnabled = true
if mx == null or crypto == null then
    hackingEnabled = false
end if


if not hackingEnabled then
    clear_screen
    FantomLogo

    FantomNotify("Fantom has detected missing libs. Would you like Fantom to install them? y/n",true)
    FantomNotify("In some cases this can take multiple minutes or even longer.\n",true)
    pick = user_input("<color=green> ></color>")
    
    if pick == "y" and apt != null then

        print("<color=green>This can take a while.. please be patient</color>")


        hs = findService("repository")
        apt.add_repo(hs)
        apt.update

        libF = get_shell.host_computer.File("/lib")
        guest = get_shell.host_computer.File("/home/guest")
        sucess = false

        if libF then
            if libF.has_permission("w") then
                apt.install("metaxploit.so","/lib")
                apt.install("crypto.so","/lib")

                mx = include_lib("/lib/metaxploit.so")
                crypto = include_lib("/lib/crypto.so")
                hackingEnabled = true
                success = true
            end if
        end if

        if guest then
            if not success then
                if guest.has_permission("w") then
                    apt.install("metaxploit.so","/home/guest")
                    apt.install("crypto.so","/home/guest")

                    mx = include_lib("/home/guest/metaxploit.so")
                    crypto = include_lib("/home/guest/crypto.so")
                    hackingEnabled = true

                end if
            end if
        end if
    
        FantomNotify("If Fantom still has hacking commands disabled this process failed.",true)
        wait(3)
    else

        FantomNotify("Either aptclient.so was not found or you declined the question.",true)
        wait(3)

    end if

    clear_screen
end if





//I split up the hacking part into alot of functions so I could avoid rewriting code
//This also lets me have alot of freedom over what I can do with it rather than just hacking every open service an returning the objects
FantomXploit = {}

FantomXploit.sanity = function(self)
    if hackingEnabled then
        return true
    else
        return false
    end if
end function

//for the self escalation command
FantomXploit.loadLib = function(self,file)
    if not self.sanity then
        return
    end if
    s = get_shell.host_computer.File(file)
    if s then
        return mx.load(file)
    else
        return null
    end if
end function


FantomXploit.isPortDead = function(self,ip,aport)
    r = get_router(ip)
    if r then
        lans = r.devices_lan_ip
        for lan in lans
            ports = r.device_ports(lan)
            if ports == null then continue
            for port in ports
                if port.port_number != aport then continue
                info = r.port_info(port).split(" ")[0]
                if info == "unknown" then
                    return true
                else
                    return false
                end if
            end for
        end for
        return true
    end if
end function

FantomXploit.getDumpedLib = function(self,ip,port=null)
    if not self.sanity then
        return
    end if
    if port != null then
        lib = mx.net_use(ip,port)
        if typeof(lib) != "net_session" then //These two if statements patch the kernel_router delete secure method
            lib = mx.net_use(ip,port)
        end if

    else
        lib = mx.net_use(ip)
        if typeof(lib) != "net_session" then
            lib = mx.net_use(ip)
        end if

    end if
    return lib.dump_lib
end function


FantomXploit.getMemoryZones = function(self,mlib)
    if not self.sanity then
        return
    end if
    return mx.scan(mlib)
end function

//custom parser btw
FantomXploit.getVulns = function(self,lib,memoryZones,extra=null)
    if not self.sanity then
        return
    end if
    vulns = []

    for address in memoryZones

        got = mx.scan_address(lib,address)


        got = got.replace("decompiling source...","")
        got = got.replace("searching unsecure values...","")
        got = got.replace("Unsafe check: ","")
        
        lines = got.split(char(10))

        for line in lines
            if line.indexOf("*") == null then
                if line == "" then continue
                line = line.replace(".","")
                unsafe = line[line.indexOf("<b>"):line.indexOf("</b>")]

                unsafe = unsafe.replace("<b>","")
                unsafe = unsafe.replace("</b>","")

                //print(unsafe + address)
                if extra == null then
                    got = lib.overflow(address,unsafe)
                else
                    got = lib.overflow(address,unsafe,extra)
                end if
                vulns.push(got)
            end if
        end for

    end for
    return vulns
end function


FantomXploit.getAddresses = function(self,lib,memoryZones,extra=null)
    if not self.sanity then
        return
    end if
    vulns = []

    for address in memoryZones

        got = mx.scan_address(lib,address)


        got = got.replace("decompiling source...","")
        got = got.replace("searching unsecure values...","")
        got = got.replace("Unsafe check: ","")
        
        lines = got.split(char(10))

        for line in lines
            if line.indexOf("*") == null then
                if line == "" then continue
                line = line.replace(".","")
                unsafe = line[line.indexOf("<b>"):line.indexOf("</b>")]
                //print(unsafe + address)
                unsafe = unsafe.replace("<b>","")
                unsafe = unsafe.replace("</b>","")
                got = lib.overflow(address,unsafe)
                vulns.push([address,unsafe])
            end if
        end for

    end for
    return vulns
end function




FantomAttackerShell = {}


FantomAttackerShell.commands = {}
FantomAttackerShell.commands.func = function(shell,args=null)
    FantomNotify("Commands that start with a * are global commands.")
    FantomNotify("These commands can be used no matter the shell")
    print("\n")

    print("\n<color=green>Hacking.</color>\n")

    print("<color=green>brute</color><color=#3f3e40> [port] [pass list] [user] Password bruteforcer (ssh/ftp only)</color>")
    print("<color=green>hack</color><color=#3f3e40> [port]          - Hacks target port</color>")
    print("<color=green>pentest</color><color=#3f3e40> [port]       - View objects returned</color>")
    print("<color=green>rob</color><color=#3f3e40>                  - Grab all banks</color>")
    print("<color=green>selfesc</color><color=#3f3e40> [opt:extra] - local escalation</color>")

    print("\n<color=green>Info gathering/Recon.</color>\n")

    print("<color=green>info</color><color=#3f3e40>                 - Show info on network</color>")
    print("<color=green>*decipher</color><color=#3f3e40> [hash]      - Decipher a hash</color>")
    print("<color=green>lans</color><color=#3f3e40>                 - Show lan IPs</color>")

    print("\n<color=green>Network wide.</color>\n")

    print("<color=green>rshell</color><color=#3f3e40>               - Rshell everyone possible</color>")
    print("<color=green>oof</color><color=#3f3e40>                  - Delete everything</color>")
    print("<color=green>net-rob</color><color=#3f3e40>              - Steals all banks/logins possible</color>")

    print("\n")
end function


FantomAttackerShell.info = {}
FantomAttackerShell.info.func = function(shell,args=null)
    ShowTargetInfo(shell.target)
end function

FantomAttackerShell["lans"] = {}
FantomAttackerShell["lans"].func = function(shell,args=null)
    r = get_router(shell.target)
    FantomNotify("These are lans that can be reached with a ping.")
    FantomNotify("There may be others behind a firewall.")
    for lans in r.devices_lan_ip
        print(lans)
    end for
end function




FantomAttackerShell["brute"] = {}
FantomAttackerShell["brute"].func = function(shell,args=null)
    if args == null then
        FantomNotify("Please provide the ssh port, the password file, and a user.", true)
        return
    end if
    file = get_shell.host_computer.File(args[1])
    if not file then
        FantomNotify("Invalid file.",true)
        return
    end if
    if args.len >= 2 then
        for pw in file.get_content.split("\n")
            sh = get_shell.connect_service(shell.target,args[0].to_int,args[2],pw)
            if typeof(sh) == "shell" then
                print(args[2]+":"+pw+" "+args[0])
                break
            else
                FantomNotify("Fantom is cracking the password. "+args[2]+":"+pw, true)
            end if
        end for
    end if
end function


FantomAttackerShell["net-rob"] = {}
FantomAttackerShell["net-rob"].func = function(shell,args=null)
    FantomNotify("Fantom will crash sometimes when using this.",true)
    FantomNotify("Grey Hack doesn't like these style of scripts",true)
    wait(2)
    exploit = new FantomXploit
    r = get_router(shell.target)
    blist = []
    banned = false
    if r then

        ports = r.used_ports
        for port in ports

            for bannedips in blist
                if port.get_lan_ip == bannedips then
                    banned = true
                end if
            end for

            if banned then
                banned = false
                continue
            end if

            if port.is_closed then
                continue
            end if

            blist.push(port.get_lan_ip)

            lib =  exploit.getDumpedLib(shell.target,port.port_number)

            mem = exploit.getMemoryZones(lib)
            vulns = exploit.getVulns(lib,mem)


            for vuln in vulns

                if typeof(vuln) == "shell" then

                    users = vuln.host_computer.File("/home")
                    if users then

                        for user in users.get_folders
                            bank = "/home/"+user.name+"/Config/Bank.txt"
                            bankFile = vuln.host_computer.File(bank)
                            if bankFile then

                                if bankFile.has_permission("r") then
                                    print(bankFile.get_content)
                                end if

                            end if
                        end for

                    end if

                end if




                if typeof(vuln) == "computer" then

                    users = vuln.File("/home")
                    if users then

                        for user in users.get_folders
                            bank = "/home/"+user.name+"/Config/Bank.txt"
                            bankFile = vuln.File(bank)
                            if bankFile then

                                if bankFile.has_permission("r") then
                                    print(bankFile.get_content)
                                end if

                            end if
                        end for

                    end if

                end if




            end for

           
        end for


        lans  = r.devices_lan_ip

        for lan in lans
            lib =  exploit.getDumpedLib(shell.target)

            mem = exploit.getMemoryZones(lib)
            vulns = exploit.getVulns(lib,mem,lan)

            for vuln in vulns

                if typeof(vuln) == "shell" then

                    users = vuln.host_computer.File("/home")
                    if users then

                        for user in users.get_folders
                            bank = "/home/"+user.name+"/Config/Bank.txt"
                            bankFile = vuln.host_computer.File(bank)
                            if bankFile then

                                if bankFile.has_permission("r") then
                                    print(bankFile.get_content)
                                end if

                            end if
                        end for

                    end if

                end if




                if typeof(vuln) == "computer" then

                    users = vuln.File("/home")
                    if users then

                        for user in users.get_folders
                            bank = "/home/"+user.name+"/Config/Bank.txt"
                            bankFile = vuln.File(bank)
                            if bankFile then

                                if bankFile.has_permission("r") then
                                    print(bankFile.get_content)
                                end if

                            end if
                        end for

                    end if

                end if
            end for

        end for


    end if

end function






//later versions will include router hacks
FantomAttackerShell["oof"] = {}
FantomAttackerShell["oof"].func = function(shell,args=null)
    FantomNotify("Fantom will crash sometimes when using this.",true)
    FantomNotify("Grey Hack doesn't like these style of scripts",true)
    FantomNotify("If fantom detects a binary named 'escalate' in its current directory it will ask to use that for self escalation")
    wait(2)

    
    esclateBin = get_shell.host_computer.File(current_path+"/escalate")

    recursiveoof = function(start)
        for file in start.get_files
            if not file then
                continue
            end if
            //print(file.name)
            file.delete()
        end for
        for folder in start.get_folders
            if not folder then
                continue
            end if
            //print(folder.name)
            recursiveoof(folder)
            folder.delete()
        end for
    end function


    exploit = new FantomXploit
    r = get_router(shell.target)
    prev = ""

    if r then

        ports = r.used_ports
        for port in ports

            if exploit.isPortDead(shell.target,port.port_number) then
                FantomNotify("Port is dead/unknown. skipping",true)
                continue
            end if

            if port.get_lan_ip != prev then
                escdeb = false
            end if
            prev = port.get_lan_ip


            if port.is_closed then
                continue
            end if




            lib =  exploit.getDumpedLib(shell.target,port.port_number)

            mem = exploit.getMemoryZones(lib)
            vulns = exploit.getVulns(lib,mem)


            for vuln in vulns




                if typeof(vuln) == "shell" then


                    if esclateBin and escdeb == false then
                        escdeb = true
                        FantomNotify("Fantom has noticed that you have a binary called 'escalate'. Should Fantom upload an execute this? y/n")
                        FantomNotify("Fantom will launch this binary with a extra argument for a password (it's 'fantom') but you can ignore this",true)
                        said = user_input(":",0,1)
                        if said.lower == "y" then
                            get_shell.scp(current_path+"/escalate","/home/guest",vuln)
                            get_shell.scp("/lib/metaxploit.so","/home/guest",vuln)
                            get_shell.scp("/lib/crypto.so","/home/guest",vuln)
                            vuln.launch("/home/guest/escalate","fantom")
                        end if
                    end if

                    root = vuln.host_computer.File("/")
                    home = vuln.host_computer.File("/home")


                    if home then 
                        for users in home.get_folders
                            sh = get_shell(users.name,"fantom")


                            if typeof(sh) == "shell" then
                                

                                passwd = sh.host_computer.File("/etc/passwd")

                                if passwd then

                                    if passwd.has_permission("r") then

                                        pwdcontent = passwd.get_content
                                        for line in pwdcontent.split("\n")
                                            sep = line.split(":")

                                            if sep[0] == "root" then
                                                rootpass = crypto.decipher(sep[1])
                                                print("root pass = "+rootpass)
                                                print(sep[1])
                                                sh = get_shell("root",rootpass)
                                                if typeof(sh) == "shell" then
                                                    root = sh.host_computer.File("/")
                                                    recursiveoof(root)
                                                end if
                                                break
                                            end if

                                        end for

                                    end if
                                end if

                                root = sh.host_computer.File("/")
                                recursiveoof(root)
                            end if
                        end for
                    end if






                    rootlogin = get_shell("root","fantom")
                    if typeof(rootlogin) == "shell" then
                        root = rootlogin.host_computer.File("/")
                        recursiveoof(root)
                    end if



                end if

                if typeof(vuln) == "computer" then

                    recursiveoof(vuln.File("/"))

                end if

                if typeof(vuln) == "file" then

                    recursiveoof(vuln.parent)

                end if

            end for

           
        end for


        rlib =  exploit.getDumpedLib(shell.target,0)

        rmem = exploit.getMemoryZones(lib)
        for lan in r.devices_lan_ip
            rvulns = exploit.getVulns(rlib,rmem,lan)
            for vuln in rvulns

                if typeof(vuln) == "shell" then

                    root = vuln.host_computer.File("/")
                    recursiveoof(root)

                end if
                if typeof(vuln) == "computer" then

                    recursiveoof(vuln.File("/"))

                end if
                if typeof(vuln) == "file" then

                    recursiveoof(vuln.parent)

                end if

            end for
        end for




    end if

end function



FantomAttackerShell.exit = {}
FantomAttackerShell.exit.func = function(shell,args=null)
    shell.system = true
    shell.prefix = defaultPrefix
    shell.ct = FantomSystemShell
    shell.target = "none"
    FantomNotify("Exited attacker shell.")
end function

FantomAttackerShell.sniffer = {}
FantomAttackerShell.sniffer.func = function(shell,args=null)
    if args == null then
    mx.sniffer
    return
    end if
    if args.hasIndex(1) then
        if args[0] == "true" then
            mx.sniffer(true)
        else
            mx.sniffer(false)
        end if
    end if
end function

FantomAttackerShell.pentest = {}
FantomAttackerShell.pentest.func = function(shell,args=null)
    if shell.target == "none" then
        print("You don't have a target")
    end if

    exploit = new FantomXploit
    lib = exploit.getDumpedLib(shell.target,args[0].to_int)

    mem = exploit.getMemoryZones(lib)
    vulns = exploit.getVulns(lib,mem)

    for vuln in vulns
        print(vuln)
    end for
end function




FantomAttackerShell.hackrouter = {}
FantomAttackerShell.hackrouter.func = function(shell,args=null)
    if shell.target == "none" then
        print("You don't have a target")
    end if

    use=function(type)
        print("Fantom has found a "+type+". use it? y/n")
        said = user_input(":")
        if said == "y" then
            return true
        else
            return false
        end if
    end function

    exploit = new FantomXploit
    lib = exploit.getDumpedLib(shell.target)

    mem = exploit.getMemoryZones(lib)
    if args then
        vulns = exploit.getVulns(lib,mem,args[0])
    else
        vulns = exploit.getVulns(lib,mem)
    end if

    for vuln in vulns
      

        if typeof(vuln) == "computer" then

                pwd = vuln.File("/etc/passwd")
                if pwd then
                    if pwd.has_permission("r") then
                        print(pwd.get_content)
                    end if
                end if
                
                users = vuln.File("/home").get_folders

                if users then

                    for user in users

                        bank = vuln.File("/home/"+user.name+"/Config/Bank.txt")
                        if bank then

                            if bank.has_permission("r") then
                                print(bank.get_content)
                            end if

                        end if

                    end for
        

                end if


        end if


        if typeof(vuln) == "file" then

            for root in vuln.parent.get_folders
                if root.name == "home" then
                    for user in root.get_folders
                        for userfiles in user.get_folders
                            if userfiles.name == "Config" then
                                for files in userfiles.get_files
                                    if files.name == "Bank.txt" then
                                        if files.has_permission("r") then
                                            print(files.get_content)
                                        end if
                                    end if
                                end for
                            end if
                        end for
                    end for
                end if
            end for


        end if




    end for
end function




FantomAttackerShell.hack = {}
FantomAttackerShell.hack.func = function(shell,args=null)
    if shell.target == "none" then
        print("You don't have a target")
        return
    end if
    if args == null then
        FantomNotify("Please specify a port and a extra parameter if you want",true)
        return
    end if

    use=function(type)
        print("Fantom has found a "+type+". use it? y/n")
        said = user_input(":")
        if said == "y" then
            return true
        else
            return false
        end if
    end function


    exploit = new FantomXploit

    if exploit.isPortDead(shell.target,args[0].to_int) then
        FantomNotify("Invalid port.", true)
        return
    end if

    lib = exploit.getDumpedLib(shell.target,args[0].to_int)


    mem = exploit.getMemoryZones(lib)
    if not args.hasIndex(1) then
        vulns = exploit.getVulns(lib,mem)
    end if

    if args.hasIndex(1) then
        print("called with extra args.")
        vulns = exploit.getVulns(lib,mem,args[1])
    end if

    for vuln in vulns
      
        if typeof(vuln) == "shell" then
            agreed = use(typeof(vuln))
            if agreed then
                vuln.start_terminal
            end if
        end if


        if typeof(vuln) == "computer" then

                pwd = vuln.File("/etc/passwd")
                if pwd then
                    if pwd.has_permission("r") then
                        print(pwd.get_content)
                    end if
                end if
                
                users = vuln.File("/home").get_folders

                if users then

                    for user in users

                        bank = vuln.File("/home/"+user.name+"/Config/Bank.txt")
                        if bank then

                            if bank.has_permission("r") then
                                print(bank.get_content)
                            end if

                        end if

                    end for
        

                end if


        end if


        if typeof(vuln) == "file" then

            for root in vuln.parent.get_folders
                if root.name == "home" then
                    for user in root.get_folders
                        for userfiles in user.get_folders
                            if userfiles.name == "Config" then
                                for files in userfiles.get_files
                                    if files.name == "Bank.txt" then
                                        if files.has_permission("r") then
                                            print(files.get_content)
                                        end if
                                    end if
                                end for
                            end if
                        end for
                    end for
                end if
            end for


        end if




    end for
end function



//These commands are shared between the attacker an system shell
FantomSharedCommands = {}


FantomSharedCommands.help = {}
FantomSharedCommands.help.func = function(shell,args=null)

    print("\n<color=green>Welcome! this goes over how Fantom works</color>\n")

    print("<color=green>Types of shells</color>\n")
    print("Fantom seperates its hacking commands an system commands into different shells.")
    print("While a 'system shell' is active commands executed will run on YOUR machine")
    print("You can get into an 'attacker' shell by typing in a ip or domain at any point.\n")

    print("<color=green>System shell</color>\n")
    print("The 'system shell' will contain commands that assist you such as 'secure' but not really hacking related.\n")

    print("<color=green>Attacker shell</color>\n")
    print("The 'attacker shell' will assist you in hacking your targets.\n")

    print("<color=green>Global commands</color>\n")
    print("Global commands are commands that can be executed from any shell.")
    print("These are commands like clear, decipher, things you would want everywhere.\n")

    print("<color=green>AMC (Automatic Mission Completion)</color>\n")
    print("AMC is a special shell for Fantom's automatic mission completion system.")
    print("AMC can automatically do certain missions without user interference")
    print("Where AMC cannot automate you will be prompted with instructions.")
    print("AMC is NOT bug-free and is not finished. use rentals and expect bugs/crashes")


end function




FantomSharedCommands.updatemx = {}
FantomSharedCommands.updatemx.func = function(shell,args=null)
    apt.update()
    apt.install("metaxploit.so")
end function



FantomSharedCommands.ps = {}
FantomSharedCommands.ps.func = function(shell,args=null)
    output = get_shell.host_computer.show_procs
    print(format_columns(output))
end function


FantomSharedCommands.connectwifi = {}
FantomSharedCommands.connectwifi.func = function(shell,args=null)
    if args == null then
        FantomNotify("Please type the name of the WIFI network.",true)
        return
    end if

    cdir = get_shell.host_computer.File(current_path)
    if not cdir.has_permission("w") then
        FantomNotify("No write permission in current directory.",true)
        return
    end if

    if not cdir.has_permission("r") then
        FantomNotify("No read permission in current directory.",true)
        return
    end if


    crypto.airmon("start","wlan0")

    wifis = get_shell.host_computer.wifi_networks("wlan0")

    for wifi in wifis
        data = wifi.split(" ")

        if data[2] == args[0] then

            pwr = data[1].replace("%","")
            pwr = pwr.to_int
            calc = floor(300000/pwr)
            //interestingly this fails during high server lag (returns an empty string)
            FantomNotify("Fantom will stop automatically when theres enough ACKS.")
            err = crypto.aireplay(data[0],data[2],calc)

            if typeof(err) == "string" then
                FantomNotify(err,true)
                return
            end if

            pw = crypto.aircrack(current_path+"/file.cap")
            FantomNotify("WiFi password is "+pw)
            get_shell.host_computer.connect_wifi("wlan0",data[0],data[2],pw)
            FantomNotify("Should be connected now.")

        end if
    end for


end function

FantomSharedCommands.test = {}
FantomSharedCommands.test.func = function(shell,args=null)

    r = get_router
    x = new FantomXploit
    res = x.isPortDead(r.public_ip,81)
    print(res)

end function

FantomSharedCommands.processlogger = {}
FantomSharedCommands.processlogger.func = function(shell,args=null)

    FantomNotify("ProcessLogger is designed to log newly opened processes (rshell detector)")
    if active_user != "root" then
        FantomNotify("Running Fantom as root is recommended for ProcessLogger so it's not easily killed")
    end if
    FantomNotify("See a process you don't recognize? kill it.",true)
    pidlist = []
    b = [] //pids that are now dead (closed processes) are added here and removed from the pidlist later in the code
    first = true //Is this the first run of the loop?
                    //If so, we append every currently open process into the pid list.
                    //This is so it doesnt flood the user with all the currently open processes as a "new process"
    old = get_shell.host_computer.show_procs             
    while true 
        current = get_shell.host_computer.show_procs
        for line in current.split("\n")
            data = line.split(" ")
            pid = data[1]

            if pid == "PID" then
                continue
            end if

            if first then
                pidlist.push(pid)
            end if


            if current.split("\n").len < old.split("\n").len then
                closedpid = old.split("\n")[current.split("\n").len].split(" ")[1]
                closedproc = old.split("\n")[current.split("\n").len].split(" ")[4]
                FantomNotify("Process was closed. "+closedpid+" "+closedproc,true)
                b.push(closedpid)
                old = current
            end if


            dupe = false
            for pidd in pidlist
                if pid == pidd then
                    dupe = true
                end if
            end for
            if not dupe then
                FantomNotify("New process. "+pid+" "+data[4], true)
                pidlist.push(pid)
            end if


            i = 0
            for deadpid in b
                for pid in pidlist
                    if pid == deadpid then
                        pidlist.remove(i)
                    end if
                    i = i + 1
                end for
            end for

        end for

        b=[]
        first = false
        //pidlist = []
        old = current
    end while


end function




FantomSharedCommands.usegift = {}
FantomSharedCommands.usegift.func = function(shell,args=null)

    gift_txt = get_shell.host_computer.File(home_dir+"/Desktop/Gift.txt")
    if gift_txt then
        if gift_txt.has_permission("r") then
            
            contents = gift_txt.get_content
            contents = contents.replace("Wifi access:","")
            contents = contents.replace("----------","")
            contents = contents.replace("Password: ","")
            data = contents.split("\n")[3:]

            bssid = data[0]
            essid = data[1]
            pw = data[2]



            net = get_shell.host_computer.connect_wifi("wlan0",bssid,essid,pw)

            if not net then
                FantomNotify("Incorrect password / Unable to find network.",true)
            end if


        end if
    end if

end function

FantomSharedCommands.selfesc = {}
FantomSharedCommands.selfesc.func = function(shell,args=null)

    if args == null then
        args = []
    end if

    exploit = new FantomXploit
    libs = get_shell.host_computer.File("/lib")
    if libs then
        for libFile in libs.get_files
            mlib = exploit.loadLib("/lib/"+libFile.name)
            memzones = exploit.getMemoryZones(mlib)
            if args == null then
                vulns = exploit.getVulns(mlib,memzones)
            end if
            if args.hasIndex(1) then
                vulns = exploit.getVulns(mlib,memzones,args[0])
            end if
        end for
    end if
end function



FantomSharedCommands.clear = {}
FantomSharedCommands.clear.func = function(shell,args=null)
    clear_screen
    FantomLogo
end function

FantomSharedCommands.decipher = {}
FantomSharedCommands.decipher.func = function(shell,args=null)
    if args == null then
        FantomNotify("Please specify a md5 hash.",true)
        return
    end if
    if args[0].len != 32 then
        FantomNotify("Please specify a valid md5 hash.",true)
        return
    end if

    print(crypto.decipher(args[0]))

end function





FantomSharedCommands.finder = {} 

FantomSharedCommands.finder.func = function(shell,args=null)
    if args == null then
        return
    end if
    FantomNotify("This can take multiple minutes.. please be patient\n")
    FantomNotify("This can also accept service versions. (example: finder ssh 1.0.1)\n")
    got = findService(args[0:].join(" "))

    //it can only accept service versions due to how the router.port_info function returns the name AND version

    ShowTargetInfo(got)
end function




FantomSharedCommands.spook = {}
FantomSharedCommands.spook.func = function(shell,args=null)
    clear_screen
    while true
        rng = range(1,10)
        rng.shuffle
        pull = rng.pull

        print("<color=green>   ___</color>")
        print("<color=green>  /    \</color>")
        if not pull == 5 then 
            print("<color=green> / o o  \</color>")
        else
            print("<color=green> / <color=red>o o</color>  \</color>")
        end if

        print("<color=green> |      |</color>")
        print("<color=green> /       \</color>")
        print("<color=green>/         \</color>")
        print("<color=green>|/\/\/\/\/|</color>\n")


        wait(1)
        clear_screen

        print("<color=green>   ___</color>")
        print("<color=green>  /    \</color>")

        if not pull == 5 then
            print("<color=green> /  o o \</color>")
        else
            print("<color=green> /  <color=red>o o</color> \</color>")
        end if

        print("<color=green> |      |</color>")
        print("<color=green> /       \</color>")
        print("<color=green>/         \</color>")
        print("<color=green>|/\/\/\/\/|</color>\n")

        wait(1)
        clear_screen
    end while

end function



FantomAMCShell = {}
amcmail = ""
amcpass = ""


FantomAMCShell.commands = {}
FantomAMCShell.commands.func = function(shell,args=null)
    print("\n")
    print("<color=green>amc-login</color><color=#3f3e40> [mail] [pass]           - Lets Fantom into your email (Required for AMC)</color>")
    print("<color=green>amc-list</color><color=#3f3e40>                          - List detected missions from email.</color>")
    print("<color=green>amc-do</color><color=#3f3e40> [id]                       - Do selected mission</color>")
    FantomNotify("AMC is still very much a WIP! expect bugs/crashes and use rentals.",true)
end function


FantomAMCShell["amc-login"] = {}
FantomAMCShell["amc-login"].func = function(shell,args=null)
    FantomNotify("For security reasons your login details are not stored. This means you will have to sign in again if you restart Fantom or it crashes.",true)
    if args.len >= 2 then
        amcmail = args[0]
        amcpass = args[1]
    else
        FantomNotify("Not enough arguments.",true)
        return
    end if
    mail = mail_login(amcmail,amcpass)
    if typeof(mail) == "string" then
        amcmail = ""
        amcpass = ""
        FantomNotify(mail,true)
        return
    end if
    FantomNotify("Successfully logged in.")
end function

FantomAMCShell.exit = {}
FantomAMCShell.exit.func = function(shell,args=null)
    shell.prefix = defaultPrefix
    shell.ct = FantomSystemShell
    shell.system = true
    FantomNotify("AMC shell exited.")
end function

FantomSharedCommands.amc = {}
FantomSharedCommands.amc.func = function(shell,args=null)
    FantomNotify("AMC shell started.")
    FantomNotify("Please type 'help for for more information.")
    shell.system = false
    shell.ct = FantomAMCShell
    shell.prefix = "<color=green>AMC > </color>"
end function


FantomSharedCommands["amc-list"].func = function(shell,args=null)

end function




//The commandTable is a map which maps the command name to its function
defaultCommandTable = FantomSystemShell


ShowTargetInfo = function(ip)

    if is_lan_ip(ip) then
        r = get_router()
    else
        r = get_router(ip)
    end if


    format_string = "LAN PORT SERVICE VERSION OPEN"

    ports = r.used_ports
    if is_lan_ip(ip) then
        ports = r.device_ports(ip)
    end if

    for port in ports


        open = "false"
        if not port.is_closed then
            open = "true"
        end if

        format_string = format_string + "\n" + port.get_lan_ip + " " + port.port_number + " " + r.port_info(port) + " " + open
    end for


    formatted = format_columns(format_string)

    print("<color=green>Recon information.</color>\n")
    print("\n<color=green>"+ip+"</color>\n")

    print(formatted)

    print("\n")

    if not is_lan_ip(ip) then
        print(whois(ip))
    else
        print("WHOIS not available on lan addresses.")
    end if

    print("\n")

    print("<color=green>Firewall information.</color>\n")
        rules = r.firewall_rules
        if not rules.len == 0 then
            for rule in rules
                print(rule)
            end for
        else
            print("No firewall rules.")
        end if

    print("\n")


    print("<color=green>Other information.</color>\n")
    print("kernel_router.so version "+r.kernel_version)
    print("BSSID "+r.bssid_name)
    print("ESSID "+r.essid_name)

end function


//Core of Fantom
//Would not recommend you touch this without extensive ms/greyscript knowledge
FantomShell = {}
FantomShell.init = function(self,prefix,commandTable)
    self.prefix = prefix //Just the text before our users input
    self.ct = commandTable //This points to the map which points the command name to its function
    //NOTE: switching between system/attacker shells is done by modifying this variable

    self.target = "none" //Our target
    self.system = true //Are we in the system shell?
end function

//The mainLoop function is responsible for parsing out the users input and executing the given commands
FantomShell.mainLoop = function(self)

    while true

        said = user_input(self.prefix)

        if said == "" then
            continue
        end if

        nsr = nslookup(said)

        vip = is_valid_ip(said)

        args = said.split(" ")

        if FantomSharedCommands.hasIndex(args[0]) then
            if args[1:] == [] or args[1:] == [""] or args[1:].len == 0 then
                FantomSharedCommands[args[0]].func(self)
            else
                FantomSharedCommands[args[0]].func(self,args[1:])
            end if
            continue
        end if

        if self.ct.hasIndex(args[0]) then

            if args[1:] == [] or args[1:] == [""] or args[1:].len == 0 then
                self.ct[args[0]].func(self)
            else
                self.ct[args[0]].func(self,args[1:])
            end if

        else



            if nsr != "Not found" then

                if not debug == true then
                    if not hackingEnabled then
                        print("\n")
                        FantomNotify("Please ensure metaxploit.so and crypto.so are in /lib or current installation directory.",true)
                        FantomNotify("Hacking commands have been disabled.",true)
                        continue
                    end if
                end if

                self.target = nsr
                self.ct = FantomAttackerShell
                self.prefix = defaultAttackerPrefix
                self.system = false
                print("\n")
                FantomNotify("Attacker shell activated.")
                FantomNotify("See commands by typing 'commands'")
                FantomNotify("You can type 'exit' to exit out of the attacker shell.\n")
                ShowTargetInfo(self.target)

            end if

            if vip then

                if not debug == true then
                    if not hackingEnabled then
                        print("\n")
                        FantomNotify("Please ensure metaxploit.so and crypto.so are in /lib or current installation directory.",true)
                        FantomNotify("Hacking commands have been disabled.",true)
                        continue
                    end if
                end if

                self.target = said
                self.prefix = defaultAttackerPrefix
                self.ct = FantomAttackerShell
                self.system = false
                print("\n")
                FantomNotify("Attacker shell activated.")
                FantomNotify("See commands by typing 'commands'")
                FantomNotify("You can type 'exit' to exit out of the attacker shell.\n")
                ShowTargetInfo(self.target)

            end if

        end if

    end while

end function


clear_screen

s = new FantomShell
s.init(defaultPrefix,defaultCommandTable)
FantomLogo
s.mainLoop
